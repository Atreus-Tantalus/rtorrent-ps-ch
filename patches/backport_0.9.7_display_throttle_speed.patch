--- src/command_ui.cc
+++ src/command_ui.cc
@@ -554,6 +554,8 @@ initialize_command_ui() {
   CMD2_DL        ("ui.unfocus_download",   std::bind(&cmd_ui_unfocus_download, std::placeholders::_1));
   CMD2_ANY       ("ui.current_view",       std::bind(&cmd_ui_current_view));
   CMD2_ANY_STRING("ui.current_view.set",   std::bind(&cmd_ui_set_view, std::placeholders::_2));
+  CMD2_VAR_STRING("ui.status.throttle.up.name",   "");
+  CMD2_VAR_STRING("ui.status.throttle.down.name", "");
 
   // TODO: Add 'option_string' for rtorrent-specific options.
   CMD2_VAR_STRING("ui.torrent_list.layout", "full");
--- src/display/utils.cc
+++ src/display/utils.cc
@@ -319,21 +319,101 @@ print_client_version(char* first, char* last, const torrent::ClientInfo& clientI
   }
 }
 
+int64_t
+retrieve_throttle_value(const torrent::Object::string_type& name, bool rate, bool up) {
+  core::ThrottleMap::iterator itr = control->core()->throttles().find(name);
+
+  if (itr == control->core()->throttles().end()) {
+    return (int64_t)-1;
+  } else {
+    torrent::Throttle* throttle = up ? itr->second.first : itr->second.second;
+
+    // check whether the actual up/down throttle exist (one of the pair can be missing)
+    if (throttle == NULL)
+      return (int64_t)-1;
+
+    int64_t throttle_max = (int64_t)throttle->max_rate();
+
+    if (rate) {
+
+      if (throttle_max > 0)
+	return (int64_t)throttle->rate()->rate();
+      else
+	return (int64_t)-1;
+
+    } else {
+      return throttle_max;
+    }
+
+  }
+}
+
 char*
 print_status_info(char* first, char* last) {
-  if (!torrent::up_throttle_global()->is_throttled())
+  std::string throttle_up_name = rpc::call_command_string("ui.status.throttle.up.name");
+  std::string throttle_down_name = rpc::call_command_string("ui.status.throttle.down.name");
+
+  if (!torrent::up_throttle_global()->is_throttled()) {
     first = print_buffer(first, last, "[Throttle off");
-  else
+  } else {
     first = print_buffer(first, last, "[Throttle %3i", torrent::up_throttle_global()->max_rate() / 1024);
 
-  if (!torrent::down_throttle_global()->is_throttled())
-    first = print_buffer(first, last, "/off KB]");
-  else
-    first = print_buffer(first, last, "/%3i KB]", torrent::down_throttle_global()->max_rate() / 1024);
-  
-  first = print_buffer(first, last, " [Rate %5.1f/%5.1f KB]",
-                       (double)torrent::up_rate()->rate() / 1024.0,
-                       (double)torrent::down_rate()->rate() / 1024.0);
+    if (!throttle_up_name.empty()) {
+      int64_t throttle_up_max = retrieve_throttle_value(throttle_up_name, false, true);
+
+      if (throttle_up_max > 0)
+        first = print_buffer(first, last, "(%1.0f)", (double)throttle_up_max / 1024.0);
+    }
+  }
+
+  if (!torrent::down_throttle_global()->is_throttled()) {
+    first = print_buffer(first, last, " / off KB]");
+  } else {
+    first = print_buffer(first, last, " / %3i", torrent::down_throttle_global()->max_rate() / 1024);
+
+    if (!throttle_down_name.empty()) {
+      int64_t throttle_down_max = retrieve_throttle_value(throttle_down_name, false, false);
+
+      if (throttle_down_max > 0)
+        first = print_buffer(first, last, "(%1.0f)", (double)throttle_down_max / 1024.0);
+    }
+
+    first = print_buffer(first, last, " KB]");
+  }
+
+  double global_uprate = (double)torrent::up_rate()->rate() / 1024.0;
+  first = print_buffer(first, last, " [Rate %5.1f", global_uprate);
+
+  if (!throttle_up_name.empty() && torrent::up_throttle_global()->is_throttled()) {
+    int64_t throttle_uprate_value = retrieve_throttle_value(throttle_up_name, true, true);
+
+    if (throttle_uprate_value > -1) {
+      double throttle_uprate = (double)throttle_uprate_value / 1024.0;
+      double main_uprate = global_uprate - throttle_uprate;
+
+      first = print_buffer(first, last, "(%3.1f|%3.1f)",
+                       main_uprate < 0.0 ? 0.0 : main_uprate,
+                       throttle_uprate);
+    }
+  }
+
+  double global_downrate = (double)torrent::down_rate()->rate() / 1024.0;
+  first = print_buffer(first, last, " / %5.1f", global_downrate);
+
+  if (!throttle_down_name.empty() && torrent::down_throttle_global()->is_throttled()) {
+    int64_t throttle_downrate_value = retrieve_throttle_value(throttle_down_name, true, false);
+
+    if (throttle_downrate_value > -1) {
+      double throttle_downrate = (double)throttle_downrate_value / 1024.0;
+      double main_downrate = global_downrate - throttle_downrate;
+
+      first = print_buffer(first, last, "(%3.1f|%3.1f)",
+                       main_downrate < 0.0 ? 0.0 : main_downrate,
+                       throttle_downrate);
+    }
+  }
+
+  first = print_buffer(first, last, " KB]");
 
   first = print_buffer(first, last, " [Port: %i]", (unsigned int)torrent::connection_manager()->listen_port());
 
